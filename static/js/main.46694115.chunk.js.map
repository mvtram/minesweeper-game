{"version":3,"sources":["components/Cell.js","components/Board.js","components/GameState.js","components/Minesweeper.js","App.js","serviceWorker.js","index.js"],"names":["Cell","value","this","props","isRevealed","isFlagged","isMine","neighbour","onClick","cMenu","className","onContextMenu","getValue","Component","Board","state","boardData","initBoardData","height","width","mines","mineCount","startgame","setState","reset","updatedData","map","datarow","dataitem","x","y","data","traverseBoard","forEach","isEmpty","revealEmpty","i","push","j","grid","randomx","randomy","minesPlanted","Math","floor","random","mine","el","createEmptyArray","plantMines","getNeighbours","e","preventDefault","revealBoard","gameresult","updatedGrid","mineArray","length","key","handleClick","handleContextMenu","style","marginBottom","renderBoard","GameState","classArr","message","result","Minesweeper","resetgame","gameResultHandler","res","console","log","maxw","max","toString","maxWidth","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.46694115.chunk.js","sourcesContent":["import React, { Component } from 'react';\nclass Cell extends Component {\n   \n\ngetValue() {\n    const { value } = this.props;\n\n    if (value.isRevealed === false) {\n        return this.props.value.isFlagged ? \"F\" : null;\n      }\n    if (value.isMine) {\n        // for bomb X\n        return \"X\";\n    }\n    if (value.neighbour === 0) {\n        return null;\n    }\n    return value.neighbour;\n}\n\n\n\n    render() { \n        const { value, onClick, cMenu} = this.props;\n        let className =\n          \"cell\" +\n          (value.isRevealed ? \"\" : \" hidden\") +\n          (value.isMine ? \" is-mine\" : \"\") +\n          (value.isFlagged ? \" is-flag\" : \"\");\n    \n        return (\n          <div\n            onClick={onClick}\n            className={className}\n            onContextMenu = {cMenu}\n            >\n            {this.getValue()}\n          </div>\n        );\n    }\n}\n \nexport default Cell;","import React, {\n  Component\n} from 'react';\n\nimport Cell from './Cell';\nclass Board extends Component {\n\n\n\n  state = {\n    boardData: this.initBoardData(this.props.height, this.props.width, this.props.mines),\n    mineCount: this.props.mines,\n    startgame: false\n  }\n\n\n   startgame = ()=>{\n    this.setState({ \n      boardData: this.initBoardData(this.props.height, this.props.width, this.props.mines),\n      mineCount:this.props.mines,\n      startgame: true});\n      this.props.reset();\n  }\n\n\n  // reveals the whole board\n  revealBoard() {\n    let updatedData = this.state.boardData;\n    updatedData.map((datarow) => {\n      return datarow.map((dataitem) => {\n        return dataitem.isRevealed = true;\n      });\n    });\n    this.setState({\n      boardData: updatedData\n    })\n  }\n\n  revealEmpty(x, y, data) {\n    let area = this.traverseBoard(x, y, data);\n\n    area.forEach((value) => {\n      if (!value.isFlagged && !value.isRevealed) {\n        // console.log(value);\n        data[value.x][value.y].isRevealed = true;\n        if (value.isEmpty) {\n          this.revealEmpty(value.x, value.y, data);\n        }\n\n      }\n    })\n    return data;\n  }\n\n  createEmptyArray(height, width) {\n    let data = [];\n\n    for (let i = 0; i < height; i++) {\n      data.push([]);\n      for (let j = 0; j < width; j++) {\n        data[i][j] = {\n          x: i,\n          y: j,\n          isMine: false,\n          neighbour: 0,\n          isRevealed: false,\n          isEmpty: false,\n          isFlagged: false,\n        };\n      }\n    }\n    return data;\n  }\n\n\n  plantMines(grid, height, width, mines) {\n    let randomx, randomy, minesPlanted = 0;\n\n    while (minesPlanted < mines) {\n      randomx = Math.floor((Math.random() * height * width) % height);\n      randomy = Math.floor((Math.random() * height * width) % width);\n\n\n      if (grid[randomx][randomy].isMine === false) {\n        grid[randomx][randomy].isMine = true;\n        minesPlanted++;\n      }\n    }\n\n    return (grid);\n  }\n\n\n  // here data is the 2d array object of the grid\n  getNeighbours(data, height, width) {\n    let updatedData = data;\n\n    for (let i = 0; i < height; i++) {\n      for (let j = 0; j < width; j++) {\n        if (data[i][j].isMine !== true) {\n          let mine = 0;\n          const area = this.traverseBoard(data[i][j].x, data[i][j].y, data);\n          area.forEach(value => {\n            if (value.isMine) {\n              mine++;\n            }\n          });\n          if (mine === 0) {\n            updatedData[i][j].isEmpty = true;\n          }\n          updatedData[i][j].neighbour = mine;\n        }\n      }\n    }\n\n    return (updatedData);\n  };\n\n\n  traverseBoard(x, y, data) {\n    const el = [];\n\n    //up\n    if (x > 0) {\n      el.push(data[x - 1][y]);\n    }\n\n    //down\n    if (x < this.props.height - 1) {\n      el.push(data[x + 1][y]);\n    }\n\n    //left\n    if (y > 0) {\n      el.push(data[x][y - 1]);\n    }\n\n    //right\n    if (y < this.props.width - 1) {\n      el.push(data[x][y + 1]);\n    }\n\n    // top left\n    if (x > 0 && y > 0) {\n      el.push(data[x - 1][y - 1]);\n    }\n\n    // top right\n    if (x > 0 && y < this.props.width - 1) {\n      el.push(data[x - 1][y + 1]);\n    }\n\n    // bottom right\n    if (x < this.props.height - 1 && y < this.props.width - 1) {\n      el.push(data[x + 1][y + 1]);\n    }\n\n    // bottom left\n    if (x < this.props.height - 1 && y > 0) {\n      el.push(data[x + 1][y - 1]);\n    }\n\n    return el;\n  }\n\n\n\n  initBoardData(height, width, mines) {\n    let grid = this.createEmptyArray(height, width);\n    grid = this.plantMines(grid, height, width, mines);\n    //console.log(grid)\n    grid = this.getNeighbours(grid, height, width);\n\n    return grid;\n  }\n\n\n  handleContextMenu(e, x, y) {\n    e.preventDefault();\n    let updatedData = this.state.boardData;\n    let mines = this.state.mineCount;\n\n    // check if already revealed\n    if (updatedData[x][y].isRevealed) return;\n\n    if (updatedData[x][y].isFlagged) {\n      updatedData[x][y].isFlagged = false;\n      mines++;\n    } else {\n      updatedData[x][y].isFlagged = true;\n      mines--;\n    }\n\n    this.setState({\n      boardData: updatedData,\n      mineCount: mines,\n    });\n  }\n\n\n  handleClick(x, y) {\n    if (this.state.boardData[x][y].isMine) {\n      this.revealBoard();\n\n\n      const result = \"Lost\"\n\n      this.props.gameresult(result);\n      // alert(\"you found a bomb\");\n    }\n\n    // when revealed then no flag\n    // any one has to be true\n    if (this.state.boardData[x][y].isRevealed || this.state.isFlagged) {\n      return null\n    }\n\n\n    let updatedGrid = this.state.boardData;\n    updatedGrid[x][y].isFlagged = false;\n    updatedGrid[x][y].isRevealed = true;\n\n    if (updatedGrid[x][y].isEmpty) {\n      updatedGrid = this.revealEmpty(x, y, updatedGrid);\n    }\n\n\n    let mineArray = [];\n\n    updatedGrid.forEach(datarow => {\n      datarow.forEach((dataitem) => {\n        if (!dataitem.isRevealed) {\n          mineArray.push(dataitem);\n        }\n      });\n    });\n\n\n    //console.log(mineArray);\n\n    if (mineArray.length === this.props.mines) {\n      this.setState({\n        mineCount: 0\n      });\n      this.revealBoard();\n\n      const result = \"Won\"\n\n      this.props.gameresult(result);\n      // alert(\"You Win\");\n\n    }\n\n    this.setState({\n      boardData: updatedGrid,\n\n    });\n\n  }\n\n\n  renderBoard(data) {\n    return data.map((datarow) => {\n      return datarow.map((dataitem) => {\n        return (\n          // 00,01,2,3,4,5,6...\n          <div key={\n            dataitem.x * datarow.length + dataitem.y\n          } >\n            <Cell value={\n              dataitem\n            }\n              onClick={\n                () => this.handleClick(dataitem.x, dataitem.y)\n              }\n              cMenu={\n                (e) => this.handleContextMenu(e, dataitem.x, dataitem.y)\n              }\n            /> </div>\n        )\n      })\n\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"board\">\n        <div style={{ marginBottom: \"5vmin\" }}>\n          <span className=\"info\"> Mines remaining: {\n            this.state.mineCount\n          } </span>\n\n        </div>\n        {\n          this.renderBoard(this.state.boardData)\n        }\n        <div>\n          <button className=\"vibrate-1\" onClick={this.startgame}>START GAME</button>\n        </div>\n\n      </div>\n\n\n    );\n  }\n}\n\nexport default Board;","import React from 'react';\r\nimport './GameState.css'\r\nconst GameState = (props)=> {\r\n    var classArr = \"swirl-in-fwd\";\r\n    var message = props.result;\r\n    if(props.result === \"Won\"){\r\n        classArr = classArr + \" result\";\r\n        message = \"congratulations you have won it!!\"\r\n    }else{\r\n        classArr = classArr + \" lost\";\r\n        message = \"you have lost the game try again!!\"\r\n    }\r\n        return(\r\n            <div className=\"container\">\r\n            <div className={classArr}>\r\n                <div className=\"resultname\">\r\n                {message}\r\n                </div>\r\n            </div>\r\n            </div>\r\n        \r\n            )\r\n    \r\n    \r\n}\r\n\r\nexport default GameState;","import React, { Component } from 'react';\nimport Board from \"./Board\";\nimport GameState from \"./GameState\";\n\nclass Minesweeper extends Component {\n\n    state = {\n        height: 6,\n        width: 6,\n        mines: 6,\n        result: \"\",\n       \n      };\n  \n      resetgame = ()=>{\n        this.setState({result: \"\"})\n      }\n\n\n      gameResultHandler = (res) =>{\n        var result = res;\n        console.log(\"message\",res);\n       this.setState({result: result});\n      }\n\n\n    render() { \n        const { height, width, mines } = this.state;\n        const maxw = (width/2)*100;\n        const message = this.state.result;\n        var max = maxw.toString();\n      \n        return (\n          <div>\n            <div  className=\"game\" style={{\n              maxWidth: max+\"px\",\n            }} >\n            <Board \n            gameresult={(result) => this.gameResultHandler(result)} \n            reset = {this.resetgame}\n            height={height}\n            width={width} \n            mines={mines} />\n\n            {message===\"\"?null:<GameState result = {message}/>}\n       \n          </div>\n         \n          </div>\n        \n            );\n    }\n}\n \nexport default Minesweeper;","import React from 'react';\nimport './App.css';\nimport Minesweeper from './components/Minesweeper';\nfunction App() {\n  return (\n    <div className=\"App\">\n     \n      <Minesweeper />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}